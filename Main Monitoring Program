#include <iostream>
#include <fstream>
#include <thread>
#include <chrono>
#include <vector>
#include <cstdlib> // For system calls
#include <cmath>   // For anomaly detection

#ifdef _WIN32
#include <windows.h>
#include <pdh.h>
#else
#include <sys/sysinfo.h>
#endif

using namespace std;

// Function to get CPU Usage
double getCPUUsage() {
#ifdef _WIN32
    PDH_HQUERY cpuQuery;
    PDH_HCOUNTER cpuTotal;
    PdhOpenQuery(NULL, NULL, &cpuQuery);
    PdhAddCounter(cpuQuery, "\\Processor(_Total)\\% Processor Time", NULL, &cpuTotal);
    PdhCollectQueryData(cpuQuery);
    this_thread::sleep_for(chrono::seconds(1)); // Required for valid reading
    PdhCollectQueryData(cpuQuery);
    PDH_FMT_COUNTERVALUE counterVal;
    PdhGetFormattedCounterValue(cpuTotal, PDH_FMT_DOUBLE, NULL, &counterVal);
    return counterVal.doubleValue;
#else
    ifstream statFile("/proc/stat");
    string line;
    getline(statFile, line);
    statFile.close();

    size_t start = line.find(" ");
    vector<long> cpuTimes;
    while (start < line.size()) {
        size_t end = line.find(" ", start + 1);
        cpuTimes.push_back(stol(line.substr(start + 1, end - start)));
        start = end;
    }
    long idleTime = cpuTimes[3], totalTime = 0;
    for (long t : cpuTimes) totalTime += t;

    static long prevIdle = idleTime, prevTotal = totalTime;
    long diffIdle = idleTime - prevIdle, diffTotal = totalTime - prevTotal;
    prevIdle = idleTime, prevTotal = totalTime;

    return (1.0 - (double)diffIdle / diffTotal) * 100;
#endif
}

// Function to get Memory Usage
double getMemoryUsage() {
#ifdef _WIN32
    MEMORYSTATUSEX memStatus;
    memStatus.dwLength = sizeof(memStatus);
    GlobalMemoryStatusEx(&memStatus);
    return 100.0 - (memStatus.ullAvailPhys * 100.0 / memStatus.ullTotalPhys);
#else
    struct sysinfo memInfo;
    sysinfo(&memInfo);
    return 100.0 - ((double)memInfo.freeram / memInfo.totalram) * 100;
#endif
}

// Function to get Disk Usage
double getDiskUsage() {
#ifdef _WIN32
    ULARGE_INTEGER freeBytesAvailable, totalBytes;
    GetDiskFreeSpaceEx(NULL, &freeBytesAvailable, &totalBytes, NULL);
    return 100.0 - ((double)freeBytesAvailable.QuadPart / totalBytes.QuadPart) * 100;
#else
    struct statvfs diskInfo;
    statvfs("/", &diskInfo);
    return 100.0 - ((double)diskInfo.f_bfree / diskInfo.f_blocks) * 100;
#endif
}

// Function to detect anomalies
bool detectAnomaly(double cpu, double mem, double disk) {
    const double cpuThreshold = 85.0;   // Set anomaly detection threshold
    const double memThreshold = 90.0;
    const double diskThreshold = 90.0;
    return (cpu > cpuThreshold || mem > memThreshold || disk > diskThreshold);
}

// Function to display system status
void displayStatus() {
    while (true) {
        double cpuUsage = getCPUUsage();
        double memUsage = getMemoryUsage();
        double diskUsage = getDiskUsage();

        system("clear || cls");  // Clear terminal for a better UI
        cout << "==============================\n";
        cout << "     AI-Powered OS Monitor     \n";
        cout << "==============================\n";
        cout << "CPU Usage: " << cpuUsage << "%\n";
        cout << "Memory Usage: " << memUsage << "%\n";
        cout << "Disk Usage: " << diskUsage << "%\n";

        if (detectAnomaly(cpuUsage, memUsage, diskUsage)) {
            cout << "\nðŸš¨ Anomaly Detected! Check system resources.\n";
        } else {
            cout << "\nâœ… System is running normally.\n";
        }

        cout << "==============================\n";
        this_thread::sleep_for(chrono::seconds(3));
    }
}

int main() {
    displayStatus();
    return 0;
}
